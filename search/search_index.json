{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Runicorn User Guide","text":"<p>Local ML Experiment Tracking &amp; Model Versioning</p> <p>100% Offline \u2022 Privacy-First \u2022 Self-Hosted</p>"},{"location":"#what-is-runicorn","title":"What is Runicorn?","text":"<p>Runicorn is a local, open-source experiment tracking and visualization platform designed for machine learning researchers and engineers. Think of it as a self-hosted alternative to Weights &amp; Biases that runs entirely on your computer.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83c\udfe0 100% Local - All data stays on your machine, complete privacy</li> <li>\ud83d\udce6 Model Versioning - Git-like version control for ML models and datasets</li> <li>\ud83d\udcca Beautiful Visualization - Interactive charts and experiment comparison</li> <li>\ud83d\udd04 Remote Sync - Mirror experiments from remote training servers via SSH</li> <li>\ud83d\udcbb Cross-Platform - Python SDK + Web UI + Desktop App (Windows)</li> <li>\u26a1 High Performance - SQLite backend, handles 10,000+ experiments</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li> <p> Quick Start</p> <p>Get up and running in 5 minutes</p> <p> Quick Start</p> </li> <li> <p> Python SDK</p> <p>Track experiments with simple Python API</p> <p> SDK Guide</p> </li> <li> <p> CLI Reference</p> <p>Command-line tools and utilities</p> <p> CLI Docs</p> </li> <li> <p> Web Interface</p> <p>Explore the web viewer and UI features</p> <p> CLI Guide</p> </li> </ul>"},{"location":"#who-is-runicorn-for","title":"Who is Runicorn For?","text":""},{"location":"#ml-researchers","title":"ML Researchers","text":"<p>Track experiments, compare hyperparameters, and manage model versions without sending data to external services.</p> <p>Use cases: Academic research, private datasets, air-gapped environments</p>"},{"location":"#ml-engineers","title":"ML Engineers","text":"<p>Production model management with version control, lineage tracking, and deployment workflows.</p> <p>Use cases: Model registry, A/B testing, production deployment</p>"},{"location":"#data-scientists","title":"Data Scientists","text":"<p>Organize exploratory experiments, visualize results, and export findings for reports.</p> <p>Use cases: Data analysis, experiment documentation, stakeholder reporting</p>"},{"location":"#teams","title":"Teams","text":"<p>Collaborate locally or sync from shared servers while keeping full control of your data.</p> <p>Use cases: Lab servers, on-premise infrastructure, team collaboration</p>"},{"location":"#why-choose-runicorn","title":"Why Choose Runicorn?","text":""},{"location":"#vs-weights-biases","title":"vs. Weights &amp; Biases","text":"Feature W&amp;B Runicorn Privacy Cloud-based 100% local Cost $50+/user/month Free &amp; open-source Offline Requires internet Fully offline Data ownership Stored on W&amp;B servers You own all data Setup Account required <code>pip install</code> Versioning \u2713 \u2713 (Artifacts system) Visualization \u2713\u2713\u2713 \u2713\u2713 Team features \u2713\u2713\u2713 \u2713 (via remote sync)"},{"location":"#vs-tensorboard","title":"vs. TensorBoard","text":"Feature TensorBoard Runicorn UI Basic Modern (Ant Design) Experiment comparison Limited Full multi-run overlay Model versioning \u2717 \u2713 (Built-in) Status tracking \u2717 \u2713 (Auto-detect crashes) Remote sync \u2717 \u2713 (SSH mirror) Storage Event files Hybrid (SQLite + files)"},{"location":"#vs-mlflow","title":"vs. MLflow","text":"Feature MLflow Runicorn Setup complexity Medium Low Performance Good Excellent (10-500x faster queries) Model registry \u2713 \u2713 (Artifacts) Deployment \u2713\u2713\u2713 \u2713 Windows support Limited Native Deduplication \u2717 \u2713 (50-90% space saving)"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -U runicorn\n</code></pre> <p>Requirements: Python 3.8+</p> <p>Supported Platforms: Windows, Linux, macOS</p>"},{"location":"#30-second-demo","title":"30-Second Demo","text":"<pre><code>import runicorn as rn\nimport random\n\n# Initialize experiment\nrun = rn.init(project=\"demo\", name=\"my_first_run\")\n\n# Set primary metric\nrn.set_primary_metric(\"accuracy\", mode=\"max\")\n\n# Training loop\nfor step in range(1, 101):\n    loss = 2.0 * (0.95 ** step) + random.uniform(-0.01, 0.01)\n    acc = min(0.99, 0.5 + step * 0.005 + random.uniform(-0.02, 0.02))\n\n    # Log metrics\n    rn.log({\n        \"loss\": round(loss, 4),\n        \"accuracy\": round(acc, 4)\n    }, step=step)\n\n# Finish\nrn.finish()\nprint(f\"\u2713 Experiment saved: {run.id}\")\n</code></pre> <p>Then view results: <pre><code>runicorn viewer\n# Open http://127.0.0.1:23300\n</code></pre></p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Recommended Learning Path</p> <ol> <li>Quick Start Guide - Set up Runicorn in 5 minutes</li> <li>Python SDK Overview - Learn the core functions</li> <li>Image Classification Tutorial - Complete example</li> <li>FAQ - Frequently asked questions</li> </ol>"},{"location":"#features-showcase","title":"Features Showcase","text":""},{"location":"#experiment-tracking","title":"Experiment Tracking","text":"<pre><code>import runicorn as rn\n\nrun = rn.init(project=\"image_classification\", name=\"resnet50_baseline\")\n\nfor epoch in range(100):\n    # Your training code\n    train_loss = train_one_epoch(model, train_loader)\n    val_acc = validate(model, val_loader)\n\n    # Log metrics\n    rn.log({\n        \"train_loss\": train_loss,\n        \"val_accuracy\": val_acc,\n        \"learning_rate\": optimizer.param_groups[0]['lr']\n    }, step=epoch)\n\nrn.finish()\n</code></pre>"},{"location":"#model-versioning","title":"Model Versioning","text":"<pre><code>import runicorn as rn\n\nrun = rn.init(project=\"production\")\n\n# Save model as versioned artifact\nartifact = rn.Artifact(\"production-model\", type=\"model\")\nartifact.add_file(\"model.pth\")\nartifact.add_metadata({\"accuracy\": 0.95, \"f1_score\": 0.93})\n\nversion = run.log_artifact(artifact)  # \u2192 v1, v2, v3...\nprint(f\"Model saved as v{version}\")\n\nrn.finish()\n\n# Later: Load the model\nrun2 = rn.init(project=\"inference\")\nmodel_artifact = run2.use_artifact(\"production-model:latest\")\nmodel_path = model_artifact.download()\n</code></pre>"},{"location":"#remote-synchronization","title":"Remote Synchronization","text":"<p>Train on a powerful remote server, view results locally in real-time:</p> <pre><code># On remote server (Linux)\nimport runicorn as rn\n\nrun = rn.init(\n    project=\"training\",\n    storage=\"/data/runicorn\"  # Shared storage\n)\n\n# Training code...\nrn.log({\"loss\": 0.1})\nrn.finish()\n</code></pre> <p>On your local machine: Use the Web UI to connect via SSH and sync experiments automatically. No need to copy files manually!</p>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udcd6 Documentation: You're reading it!</li> <li>\ud83d\udcac Issues: GitHub Issues</li> <li>\ud83d\udd12 Security: Report vulnerabilities</li> <li>\ud83e\udd1d Contributing: Contribution Guide</li> </ul>"},{"location":"#license","title":"License","text":"<p>Runicorn is open-source software licensed under the MIT License.</p> <p>Made with \u2764\ufe0f by the Runicorn Team</p> <p>Get Started \u2192</p>"},{"location":"cli/overview/","title":"Command Line Interface","text":"<p>Runicorn provides a powerful CLI for managing experiments, artifacts, and configuration.</p>"},{"location":"cli/overview/#installation","title":"Installation","text":"<p>The CLI is automatically installed with Runicorn:</p> <pre><code>pip install runicorn\n</code></pre> <p>Verify installation:</p> <pre><code>runicorn --help\n</code></pre>"},{"location":"cli/overview/#available-commands","title":"Available Commands","text":"Command Description <code>viewer</code> Start the web viewer <code>config</code> Manage configuration <code>export</code> Export experiments <code>import</code> Import experiments <code>artifacts</code> Manage artifacts <code>export-data</code> Export metrics to CSV/Excel <code>manage</code> Advanced experiment management <code>rate-limit</code> Configure rate limits"},{"location":"cli/overview/#quick-reference","title":"Quick Reference","text":""},{"location":"cli/overview/#start-viewer","title":"Start Viewer","text":"<pre><code># Default (port 23300)\nrunicorn viewer\n\n# Custom host and port\nrunicorn viewer --host 0.0.0.0 --port 8000\n\n# With auto-reload (development)\nrunicorn viewer --reload\n</code></pre>"},{"location":"cli/overview/#configuration","title":"Configuration","text":"<pre><code># Show current config\nrunicorn config --show\n\n# Set storage root\nrunicorn config --set-user-root \"E:\\RunicornData\"\n</code></pre>"},{"location":"cli/overview/#exportimport","title":"Export/Import","text":"<pre><code># Export all experiments\nrunicorn export --out experiments.tar.gz\n\n# Export specific project\nrunicorn export --project image_classification --out exports/images.tar.gz\n\n# Import archive\nrunicorn import --archive experiments.tar.gz\n</code></pre>"},{"location":"cli/overview/#artifacts","title":"Artifacts","text":"<pre><code># List all artifacts\nrunicorn artifacts --action list\n\n# List versions\nrunicorn artifacts --action versions --name resnet50-model\n\n# Get artifact info\nrunicorn artifacts --action info --name resnet50-model --version 3\n\n# Storage statistics\nrunicorn artifacts --action stats\n</code></pre>"},{"location":"cli/overview/#common-workflows","title":"Common Workflows","text":""},{"location":"cli/overview/#workflow-1-setup-new-machine","title":"Workflow 1: Setup New Machine","text":"<pre><code># Install Runicorn\npip install runicorn\n\n# Configure storage\nrunicorn config --set-user-root \"E:\\MLData\\Runicorn\"\n\n# Verify\nrunicorn config --show\n\n# Start viewer\nrunicorn viewer\n</code></pre>"},{"location":"cli/overview/#workflow-2-backup-experiments","title":"Workflow 2: Backup Experiments","text":"<pre><code># Export all experiments from a project\nrunicorn export \\\n  --project image_classification \\\n  --out backups/image_classification_2025-10-14.tar.gz\n\n# Verify export\nls -lh backups/\n\n# Copy to backup drive\ncp backups/*.tar.gz /mnt/backup/\n</code></pre>"},{"location":"cli/overview/#workflow-3-transfer-between-machines","title":"Workflow 3: Transfer Between Machines","text":"<p>On Machine A (export): <pre><code>runicorn export \\\n  --project production_models \\\n  --out transfer.tar.gz\n</code></pre></p> <p>Transfer file (USB, network, etc.): <pre><code>scp transfer.tar.gz user@machine-b:/home/user/\n</code></pre></p> <p>On Machine B (import): <pre><code>runicorn import --archive transfer.tar.gz\n\n# Verify\nrunicorn viewer\n# Check experiments appeared\n</code></pre></p>"},{"location":"cli/overview/#command-options","title":"Command Options","text":""},{"location":"cli/overview/#global-options","title":"Global Options","text":"<p>Available for all commands:</p> Option Description <code>--help</code> Show help message <code>--storage PATH</code> Override storage root <p>Example: <pre><code># Use custom storage for this command only\nrunicorn viewer --storage \"D:\\TempStorage\"\n\n# Show help for specific command\nrunicorn artifacts --help\n</code></pre></p>"},{"location":"cli/overview/#storage-override","title":"Storage Override","text":"<p>The <code>--storage</code> option temporarily overrides the configured storage root:</p> <pre><code># Normal: Uses configured storage\nrunicorn viewer\n\n# Override: Uses specified storage\nrunicorn viewer --storage \"E:\\OtherData\"\n\n# Export from different storage\nrunicorn export --storage \"D:\\OldData\" --out old_experiments.tar.gz\n</code></pre>"},{"location":"cli/overview/#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"cli/overview/#tip-1-create-aliases","title":"Tip 1: Create Aliases","text":"<p>Bash/Linux: <pre><code># Add to ~/.bashrc or ~/.zshrc\nalias rv='runicorn viewer'\nalias rconfig='runicorn config --show'\nalias rexport='runicorn export --out'\n\n# Usage\nrv  # Start viewer\nrconfig  # Show config\n</code></pre></p> <p>PowerShell/Windows: <pre><code># Add to $PROFILE\nfunction rv { runicorn viewer }\nfunction rconfig { runicorn config --show }\n\n# Usage\nrv  # Start viewer\n</code></pre></p>"},{"location":"cli/overview/#tip-2-quick-stats","title":"Tip 2: Quick Stats","text":"<pre><code># One-liner to see artifact stats\nrunicorn artifacts --action stats | grep -E \"Total|Dedup\"\n</code></pre>"},{"location":"cli/overview/#tip-3-scheduled-exports","title":"Tip 3: Scheduled Exports","text":"<p>Linux/Mac (cron): <pre><code># Add to crontab: Export every day at 2 AM\n0 2 * * * runicorn export --out /backups/daily_$(date +\\%Y\\%m\\%d).tar.gz\n</code></pre></p> <p>Windows (Task Scheduler): <pre><code># Create scheduled task\n$action = New-ScheduledTaskAction -Execute \"runicorn\" -Argument \"export --out E:\\Backups\\daily.tar.gz\"\n$trigger = New-ScheduledTaskTrigger -Daily -At 2am\nRegister-ScheduledTask -Action $action -Trigger $trigger -TaskName \"RunicornBackup\"\n</code></pre></p>"},{"location":"cli/overview/#environment-variables","title":"Environment Variables","text":"Variable Description Example <code>RUNICORN_DIR</code> Default storage root <code>E:\\RunicornData</code> <code>RUNICORN_DISABLE_MODERN_STORAGE</code> Disable SQLite backend <code>1</code> <p>Usage:</p> <pre><code># Linux/Mac\nexport RUNICORN_DIR=\"/data/runicorn\"\nrunicorn viewer\n\n# Windows (PowerShell)\n$env:RUNICORN_DIR = \"E:\\RunicornData\"\nrunicorn viewer\n\n# Windows (CMD)\nset RUNICORN_DIR=E:\\RunicornData\nrunicorn viewer\n</code></pre>"},{"location":"cli/overview/#exit-codes","title":"Exit Codes","text":"Code Meaning <code>0</code> Success <code>1</code> General error <code>2</code> Invalid arguments <p>Example (script usage): <pre><code>#!/bin/bash\n\nrunicorn export --project demo --out demo.tar.gz\n\nif [ $? -eq 0 ]; then\n    echo \"\u2713 Export successful\"\n    # Continue with backup\n    cp demo.tar.gz /backups/\nelse\n    echo \"\u2717 Export failed\"\n    exit 1\nfi\n</code></pre></p>"},{"location":"cli/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/overview/#command-not-found","title":"Command Not Found","text":"<pre><code>runicorn: command not found\n</code></pre> <p>Solution: <pre><code># Ensure Runicorn is installed\npip list | grep runicorn\n\n# If not installed\npip install runicorn\n\n# If installed but not in PATH (use python -m)\npython -m runicorn.cli viewer\n</code></pre></p>"},{"location":"cli/overview/#permission-denied","title":"Permission Denied","text":"<pre><code>Error: Permission denied: 'E:\\RunicornData'\n</code></pre> <p>Solution: 1. Check directory exists and is writable 2. Create directory: <code>mkdir E:\\RunicornData</code> 3. Check permissions: <code>icacls E:\\RunicornData</code> (Windows) or <code>ls -la</code> (Linux)</p>"},{"location":"cli/overview/#port-already-in-use","title":"Port Already in Use","text":"<pre><code>Error: Address already in use\n</code></pre> <p>Solution: <pre><code># Use different port\nrunicorn viewer --port 8080\n\n# Or kill process using port 23300\n# Windows\nnetstat -ano | findstr :23300\ntaskkill /PID &lt;PID&gt; /F\n\n# Linux\nlsof -i :23300\nkill -9 &lt;PID&gt;\n</code></pre></p>"},{"location":"cli/overview/#next-steps","title":"Next Steps","text":"<ul> <li>More CLI documentation coming soon</li> <li>For now, use <code>runicorn --help</code> to see all available commands</li> <li>See Python SDK for programmatic usage</li> </ul> <p>Explore Python SDK \u2192</p>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Get Runicorn up and running in 5 minutes!</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":""},{"location":"getting-started/quickstart/#step-1-install-runicorn","title":"Step 1: Install Runicorn","text":"<pre><code>pip install -U runicorn\n</code></pre> <p>Requirements: Python 3.8 or higher</p> Using conda? <pre><code>conda create -n runicorn python=3.10\nconda activate runicorn\npip install runicorn\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-verify-installation","title":"Step 2: Verify Installation","text":"<pre><code>runicorn --version\n</code></pre> <p>You should see: <code>runicorn 0.4.0</code> (or later)</p>"},{"location":"getting-started/quickstart/#your-first-experiment","title":"Your First Experiment","text":""},{"location":"getting-started/quickstart/#step-1-create-a-simple-experiment","title":"Step 1: Create a Simple Experiment","text":"<p>Create a file <code>demo.py</code>:</p> <pre><code>import runicorn as rn\nimport random\nimport time\n\n# Initialize experiment\nrun = rn.init(project=\"quickstart\", name=\"demo_experiment\")\nprint(f\"\u2713 Created experiment: {run.id}\")\n\n# Set primary metric (optional)\nrn.set_primary_metric(\"accuracy\", mode=\"max\")\n\n# Training loop\nfor step in range(1, 51):\n    # Simulate training\n    loss = 2.0 * (0.9 ** step) + random.uniform(-0.05, 0.05)\n    accuracy = min(0.98, 0.5 + step * 0.01 + random.uniform(-0.02, 0.02))\n\n    # Log metrics\n    rn.log({\n        \"loss\": round(loss, 4),\n        \"accuracy\": round(accuracy, 4),\n        \"learning_rate\": 0.001\n    }, step=step)\n\n    # Simulate time passing\n    time.sleep(0.1)\n\n    # Print progress\n    if step % 10 == 0:\n        print(f\"Step {step}/50: loss={loss:.4f}, acc={accuracy:.4f}\")\n\n# Save summary\nrn.summary({\n    \"final_accuracy\": 0.95,\n    \"total_steps\": 50,\n    \"notes\": \"Demo experiment from quickstart guide\"\n})\n\n# Finish experiment\nrn.finish()\nprint(\"\u2713 Experiment completed!\")\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-run-the-experiment","title":"Step 2: Run the Experiment","text":"<pre><code>python demo.py\n</code></pre> <p>Expected output: <pre><code>\u2713 Created experiment: 20250114_153045_a1b2c3\nStep 10/50: loss=0.6974, acc=0.6234\nStep 20/50: loss=0.2433, acc=0.7156\nStep 30/50: loss=0.0849, acc=0.8089\nStep 40/50: loss=0.0296, acc=0.8945\nStep 50/50: loss=0.0103, acc=0.9567\n\u2713 Experiment completed!\n</code></pre></p>"},{"location":"getting-started/quickstart/#step-3-view-results","title":"Step 3: View Results","text":"<p>Start the web viewer:</p> <pre><code>runicorn viewer\n</code></pre> <p>Open your browser: http://127.0.0.1:23300</p> <p>You should see your experiment in the list!</p>"},{"location":"getting-started/quickstart/#explore-the-web-interface","title":"Explore the Web Interface","text":""},{"location":"getting-started/quickstart/#1-experiments-page","title":"1. Experiments Page","text":"<p>The Experiments page lets you view all your experiments in one place with filtering and search.</p> <p>Features: - \ud83d\udccb List all experiments - \ud83d\udd0d Filter by project/status - \ud83d\udcca View best metrics - \ud83d\uddd1\ufe0f Soft delete (recycle bin)</p>"},{"location":"getting-started/quickstart/#2-experiment-detail","title":"2. Experiment Detail","text":"<p>Click on any experiment to see:</p> <ul> <li>\ud83d\udcc8 Interactive Charts - Training curves with zoom/pan</li> <li>\ud83d\udcdd Real-time Logs - Live log streaming</li> <li>\ud83d\uddbc\ufe0f Images - Logged images and visualizations</li> <li>\ud83d\udcbe Artifacts - Associated models and datasets</li> </ul>"},{"location":"getting-started/quickstart/#3-artifacts-page","title":"3. Artifacts Page","text":"<p>The Artifacts page provides Git-like version control for your ML models and datasets.</p> <p>Features: - \ud83d\udce6 List all models and datasets - \ud83d\udd04 Version history - \ud83c\udf33 Dependency graph (lineage) - \ud83d\udcbe Storage statistics</p>"},{"location":"getting-started/quickstart/#configure-storage","title":"Configure Storage","text":""},{"location":"getting-started/quickstart/#set-storage-location","title":"Set Storage Location","text":"<p>Important First Step</p> <p>The first time you run Runicorn, configure where to store your data.</p> <p>Option 1: Web UI</p> <ol> <li>Click the \u2699\ufe0f Settings icon (top-right)</li> <li>Go to \"Data Directory\" tab</li> <li>Enter path: <code>E:\\RunicornData</code> (or your preferred location)</li> <li>Click \"Save Data Directory\"</li> </ol> <p>Option 2: Command Line</p> <pre><code>runicorn config --set-user-root \"E:\\RunicornData\"\n</code></pre> <p>Option 3: Code</p> <pre><code>import runicorn as rn\n\nrun = rn.init(\n    project=\"demo\",\n    storage=\"E:\\\\RunicornData\"  # Explicit path\n)\n</code></pre>"},{"location":"getting-started/quickstart/#storage-priority","title":"Storage Priority","text":"<p>Runicorn determines storage location in this order:</p> <ol> <li><code>rn.init(storage=\"...\")</code> - Highest priority</li> <li>Environment variable <code>RUNICORN_DIR</code></li> <li>User config (set via UI/CLI)</li> <li><code>./runicorn/</code> in current directory - Lowest priority</li> </ol>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":""},{"location":"getting-started/quickstart/#learn-more","title":"Learn More","text":"<ul> <li>\ud83d\udcd6 Python SDK Overview - Learn all SDK functions</li> <li>\ud83d\udcbb CLI Overview - Command-line tools</li> <li>\ud83d\uddbc\ufe0f Image Classification Tutorial - Complete PyTorch example</li> <li>\u2753 FAQ - Frequently asked questions</li> </ul>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<p>Need help?</p> <ul> <li>\ud83d\udcd6 Search this documentation</li> <li>\u2753 Check FAQ</li> <li>\ud83d\udc1b Report issues</li> <li>\ud83d\udcac Ask in GitHub Discussions</li> </ul>"},{"location":"getting-started/quickstart/#system-requirements","title":"System Requirements","text":"Component Requirement Python 3.8, 3.9, 3.10, 3.11, 3.12, 3.13 OS Windows 10+, Linux (any), macOS 10.14+ RAM 2 GB minimum, 4 GB recommended Disk 100 MB for software + storage for your experiments GPU Optional (for GPU monitoring, requires <code>nvidia-smi</code>) <p>Ready to dive deeper?</p> <p>Create Your First Real Experiment \u2192</p>"},{"location":"reference/faq/","title":"Frequently Asked Questions","text":"<p>Common questions and answers about Runicorn.</p>"},{"location":"reference/faq/#general","title":"General","text":""},{"location":"reference/faq/#what-is-runicorn","title":"What is Runicorn?","text":"<p>Runicorn is a local, open-source experiment tracking and model versioning platform for machine learning. It provides tools to track experiments, manage model versions, and visualize results\u2014all running on your own machine.</p>"},{"location":"reference/faq/#is-runicorn-really-free","title":"Is Runicorn really free?","text":"<p>Yes! Runicorn is 100% free and open-source under the MIT license. No hidden costs, no premium tiers, no usage limits.</p>"},{"location":"reference/faq/#do-i-need-to-create-an-account","title":"Do I need to create an account?","text":"<p>No. Runicorn runs entirely on your local machine. No account, no registration, no cloud service required.</p>"},{"location":"reference/faq/#does-runicorn-send-data-to-external-servers","title":"Does Runicorn send data to external servers?","text":"<p>No. Runicorn has zero telemetry. All data stays on your machine.</p>"},{"location":"reference/faq/#can-i-use-runicorn-offline","title":"Can I use Runicorn offline?","text":"<p>Yes! After installation, Runicorn works completely offline.</p>"},{"location":"reference/faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"reference/faq/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<ul> <li>Python: 3.8 or higher</li> <li>OS: Windows 10+, Linux (any), macOS 10.14+</li> <li>RAM: 2 GB minimum, 4 GB recommended</li> <li>Disk: 100 MB for software + storage for experiments</li> </ul>"},{"location":"reference/faq/#how-do-i-install-runicorn","title":"How do I install Runicorn?","text":"<pre><code>pip install -U runicorn\n</code></pre>"},{"location":"reference/faq/#can-i-use-runicorn-with-conda","title":"Can I use Runicorn with conda?","text":"<p>Yes! Runicorn works in conda environments:</p> <pre><code>conda create -n ml python=3.10\nconda activate ml\npip install runicorn\n</code></pre>"},{"location":"reference/faq/#where-does-runicorn-store-data","title":"Where does Runicorn store data?","text":"<p>By default, data is stored in:</p> <ol> <li>User-configured path (recommended): Set via <code>runicorn config --set-user-root \"PATH\"</code></li> <li>Environment variable <code>RUNICORN_DIR</code></li> <li>Current directory <code>./.runicorn/</code></li> </ol>"},{"location":"reference/faq/#how-do-i-change-the-storage-location","title":"How do I change the storage location?","text":"<p>Method 1 (Web UI): 1. Open viewer: <code>runicorn viewer</code> 2. Click \u2699\ufe0f Settings \u2192 Data Directory 3. Enter path and click Save</p> <p>Method 2 (CLI): <pre><code>runicorn config --set-user-root \"E:\\RunicornData\"\n</code></pre></p>"},{"location":"reference/faq/#usage","title":"Usage","text":""},{"location":"reference/faq/#do-i-need-to-modify-my-training-code","title":"Do I need to modify my training code?","text":"<p>Minimal changes required:</p> <pre><code># Add 4 lines to your code:\nimport runicorn as rn\n\nrun = rn.init(project=\"demo\")           # Line 1: Initialize\nrn.log({\"loss\": 0.1}, step=1)           # Line 2: Log metrics\nrn.finish()                             # Line 3: Finish\n</code></pre>"},{"location":"reference/faq/#can-i-use-runicorn-with-tensorflow","title":"Can I use Runicorn with TensorFlow?","text":"<p>Yes! Runicorn is framework-agnostic:</p> <pre><code>import runicorn as rn\nimport tensorflow as tf\n\nrun = rn.init(project=\"tf_demo\")\n\n# Your TensorFlow code\nmodel = tf.keras.Sequential([...])\nmodel.compile(...)\n\nfor epoch in range(10):\n    history = model.fit(x_train, y_train)\n\n    # Log TensorFlow metrics\n    rn.log({\n        \"loss\": history.history['loss'][0],\n        \"accuracy\": history.history['accuracy'][0]\n    }, step=epoch)\n\nrn.finish()\n</code></pre>"},{"location":"reference/faq/#can-i-use-runicorn-with-scikit-learn","title":"Can I use Runicorn with scikit-learn?","text":"<p>Yes!</p> <pre><code>import runicorn as rn\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nrun = rn.init(project=\"sklearn_demo\")\n\n# Train model\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\n# Evaluate and log\naccuracy = accuracy_score(y_test, model.predict(X_test))\nrn.log({\"accuracy\": accuracy})\n\nrn.summary({\"model\": \"RandomForest\", \"final_accuracy\": accuracy})\nrn.finish()\n</code></pre>"},{"location":"reference/faq/#how-do-i-view-my-experiments","title":"How do I view my experiments?","text":"<p>Start the web viewer:</p> <pre><code>runicorn viewer\n</code></pre> <p>Then open http://127.0.0.1:23300 in your browser.</p>"},{"location":"reference/faq/#can-i-access-the-viewer-from-another-computer","title":"Can I access the viewer from another computer?","text":"<p>Yes, bind to all interfaces:</p> <pre><code>runicorn viewer --host 0.0.0.0 --port 8000\n</code></pre> <p>Then access from other computers: <code>http://YOUR_IP:8000</code></p> <p>Security Warning</p> <p>Only do this on trusted networks! The API has no authentication.</p>"},{"location":"reference/faq/#artifacts-model-versioning","title":"Artifacts &amp; Model Versioning","text":""},{"location":"reference/faq/#what-are-artifacts","title":"What are Artifacts?","text":"<p>Artifacts are versioned ML assets (models, datasets, configs). Think of it as Git for machine learning files.</p>"},{"location":"reference/faq/#how-do-i-save-a-model-as-an-artifact","title":"How do I save a model as an artifact?","text":"<pre><code>import runicorn as rn\n\nrun = rn.init(project=\"demo\")\n\n# Save your model file\ntorch.save(model.state_dict(), \"model.pth\")\n\n# Create artifact\nartifact = rn.Artifact(\"my-model\", type=\"model\")\nartifact.add_file(\"model.pth\")\nartifact.add_metadata({\"accuracy\": 0.95})\n\n# Save with version control\nversion = run.log_artifact(artifact)  # Returns v1, v2, v3...\nprint(f\"Model saved as v{version}\")\n\nrn.finish()\n</code></pre>"},{"location":"reference/faq/#how-do-i-load-a-saved-model","title":"How do I load a saved model?","text":"<pre><code>import runicorn as rn\n\nrun = rn.init(project=\"inference\")\n\n# Load artifact\nartifact = run.use_artifact(\"my-model:latest\")  # Or \"my-model:v3\"\nmodel_path = artifact.download()\n\n# Load model\nimport torch\nstate_dict = torch.load(model_path / \"model.pth\")\nmodel.load_state_dict(state_dict)\n\nrn.finish()\n</code></pre>"},{"location":"reference/faq/#how-much-storage-does-runicorn-use","title":"How much storage does Runicorn use?","text":"<p>Runicorn uses content deduplication to save 50-90% storage:</p> <ul> <li>Without dedup: 100 model checkpoints \u00d7 1 GB = 100 GB</li> <li>With dedup: ~10-20 GB (similar models share common layers)</li> </ul> <p>Check your stats:</p> <pre><code>runicorn artifacts --action stats\n</code></pre>"},{"location":"reference/faq/#can-i-delete-old-artifact-versions","title":"Can I delete old artifact versions?","text":"<p>Yes:</p> <p>Soft delete (reversible): <pre><code>runicorn artifacts --action delete --name old-model --version 1\n</code></pre></p> <p>Permanent delete: <pre><code>runicorn artifacts --action delete --name old-model --version 1 --permanent\n</code></pre></p>"},{"location":"reference/faq/#remote-sync","title":"Remote Sync","text":""},{"location":"reference/faq/#how-do-i-sync-from-a-remote-server","title":"How do I sync from a remote server?","text":"<p>Step 1: Start viewer <pre><code>runicorn viewer\n</code></pre></p> <p>Step 2: Open web UI and go to \"Remote\" page</p> <p>Step 3: Enter SSH credentials: - Host: <code>192.168.1.100</code> - Username: <code>your_username</code> - Password or SSH key</p> <p>Step 4: Browse remote directories and click \"Configure Smart Mode\"</p> <p>Step 5: Experiments sync automatically!</p>"},{"location":"reference/faq/#do-i-need-to-install-runicorn-on-the-remote-server","title":"Do I need to install Runicorn on the remote server?","text":"<p>Yes, install Runicorn on the remote server where you train models:</p> <pre><code># On remote server\npip install runicorn\n</code></pre> <p>Then use Runicorn SDK in your training scripts:</p> <pre><code>import runicorn as rn\n\nrun = rn.init(\n    project=\"training\",\n    storage=\"/data/runicorn\"  # Shared storage path\n)\n\n# Training code...\nrn.log({\"loss\": 0.1})\nrn.finish()\n</code></pre>"},{"location":"reference/faq/#whats-the-difference-between-smart-mode-and-mirror-mode","title":"What's the difference between Smart Mode and Mirror Mode?","text":"<p>Smart Mode (recommended): - Syncs metadata only - Downloads files on-demand - Fast, low bandwidth</p> <p>Mirror Mode: - Syncs all files - Real-time updates (2-second interval) - Higher bandwidth usage</p>"},{"location":"reference/faq/#performance","title":"Performance","text":""},{"location":"reference/faq/#why-is-listing-experiments-slow","title":"Why is listing experiments slow?","text":"<p>If you have 1000+ experiments, use the V2 API for 100x faster queries.</p> <p>Check your query performance: - Open browser DevTools \u2192 Network tab - Look at API call times - If <code>/api/runs</code> takes &gt;5s, you need V2</p> <p>Solution: Frontend automatically uses V2 API when available.</p>"},{"location":"reference/faq/#how-many-experiments-can-runicorn-handle","title":"How many experiments can Runicorn handle?","text":"<p>Tested with: - \u2705 10,000 experiments: Excellent performance - \u2705 100,000 experiments: Good performance (use V2 API) - \u26a0\ufe0f 1,000,000 experiments: Possible but may require optimization</p>"},{"location":"reference/faq/#does-runicorn-support-distributed-training","title":"Does Runicorn support distributed training?","text":"<p>Yes! Use Runicorn in your distributed training script:</p> <pre><code>import runicorn as rn\nimport torch.distributed as dist\n\n# Initialize experiment on rank 0 only\nif dist.get_rank() == 0:\n    run = rn.init(project=\"distributed_training\")\n\n    # Log from master process\n    rn.log({\"train_loss\": loss})\n\n    # Finish on master process\n    rn.finish()\n</code></pre>"},{"location":"reference/faq/#compatibility","title":"Compatibility","text":""},{"location":"reference/faq/#which-ml-frameworks-does-runicorn-support","title":"Which ML frameworks does Runicorn support?","text":"<p>Runicorn is framework-agnostic. Works with:</p> <ul> <li>\u2705 PyTorch</li> <li>\u2705 TensorFlow / Keras</li> <li>\u2705 JAX</li> <li>\u2705 scikit-learn</li> <li>\u2705 XGBoost, LightGBM</li> <li>\u2705 Hugging Face Transformers</li> <li>\u2705 FastAI</li> <li>\u2705 Any Python-based framework</li> </ul>"},{"location":"reference/faq/#can-i-use-runicorn-with-jupyter-notebooks","title":"Can I use Runicorn with Jupyter Notebooks?","text":"<p>Yes!</p> <pre><code># In Jupyter cell\nimport runicorn as rn\n\nrun = rn.init(project=\"notebook_demo\")\n\n# Your notebook code\n# ...\n\nrn.log({\"accuracy\": 0.95})\nrn.finish()\n\nprint(f\"View results: http://127.0.0.1:23300/runs/{run.id}\")\n</code></pre>"},{"location":"reference/faq/#does-runicorn-work-with-gpu-training","title":"Does Runicorn work with GPU training?","text":"<p>Yes! Runicorn can monitor GPU usage in real-time (requires <code>nvidia-smi</code>).</p> <p>GPU monitoring is automatic\u2014just train your model and check the GPU panel in the web UI.</p>"},{"location":"reference/faq/#data-privacy","title":"Data &amp; Privacy","text":""},{"location":"reference/faq/#can-i-export-my-data","title":"Can I export my data?","text":"<p>Yes, multiple export formats:</p> <pre><code># Export experiments (full data)\nrunicorn export --project demo --out demo.tar.gz\n\n# Export metrics only (CSV)\nrunicorn export-data --run-id &lt;ID&gt; --format csv --output metrics.csv\n\n# Export metrics (Excel with charts)\nrunicorn export-data --run-id &lt;ID&gt; --format excel --output report.xlsx\n</code></pre>"},{"location":"reference/faq/#can-i-delete-experiments","title":"Can I delete experiments?","text":"<p>Yes, with soft delete (recycle bin):</p> <p>Web UI: 1. Select experiments 2. Click \"Delete\" button 3. Experiments move to Recycle Bin 4. Restore from Recycle Bin if needed</p> <p>CLI: <pre><code># Soft delete via API requires custom script\n# Or use Web UI for deletion\n</code></pre></p> <p>Permanent deletion: - Empty Recycle Bin in Web UI - Or manually delete run directories</p>"},{"location":"reference/faq/#how-do-i-backup-my-data","title":"How do I backup my data?","text":"<p>Method 1: Export to archive <pre><code>runicorn export --out backup_$(date +%Y%m%d).tar.gz\n</code></pre></p> <p>Method 2: Copy storage directory <pre><code># Stop viewer first\ncp -r $RUNICORN_DIR /path/to/backup/\n</code></pre></p> <p>Method 3: Version control (Git LFS) <pre><code>cd $RUNICORN_DIR\ngit init\ngit lfs track \"*.pth\" \"*.h5\"\ngit add .\ngit commit -m \"Backup\"\n</code></pre></p>"},{"location":"reference/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/faq/#viewer-wont-start","title":"Viewer won't start","text":"<p>Check: 1. Is Python 3.8+ installed? <code>python --version</code> 2. Is Runicorn installed? <code>pip list | grep runicorn</code> 3. Is port 23300 available? Try: <code>runicorn viewer --port 8080</code></p>"},{"location":"reference/faq/#experiments-dont-appear-in-viewer","title":"Experiments don't appear in viewer","text":"<p>Check: 1. Correct storage root? <code>runicorn config --show</code> 2. Experiments in correct location? Check directory structure 3. Try refresh button in web UI</p>"},{"location":"reference/faq/#database-locked-windows","title":"Database locked (Windows)","text":"<p>If you see \"database is locked\" errors:</p> <pre><code># Stop viewer\n# Wait 5 seconds\n# Restart viewer\nrunicorn viewer\n</code></pre> <p>Prevention: Always stop viewer gracefully (Ctrl+C)</p>"},{"location":"reference/faq/#out-of-disk-space","title":"Out of disk space","text":"<p>Check artifact storage stats:</p> <pre><code>runicorn artifacts --action stats\n</code></pre> <p>Cleanup options: 1. Delete old artifact versions 2. Empty recycle bin 3. Export and archive old experiments</p>"},{"location":"reference/faq/#migration-integration","title":"Migration &amp; Integration","text":""},{"location":"reference/faq/#can-i-migrate-from-tensorboard","title":"Can I migrate from TensorBoard?","text":"<p>There's no automatic migration, but you can:</p> <ol> <li>Keep using TensorBoard for old experiments</li> <li>Start using Runicorn for new experiments</li> <li>Gradually migrate important experiments manually</li> </ol>"},{"location":"reference/faq/#can-i-use-both-runicorn-and-wb","title":"Can I use both Runicorn and W&amp;B?","text":"<p>Yes! Use both:</p> <pre><code>import runicorn as rn\nimport wandb\n\n# Initialize both\nrn_run = rn.init(project=\"demo\")\nwandb.init(project=\"demo\")\n\n# Log to both\nmetrics = {\"loss\": 0.1, \"accuracy\": 0.95}\nrn.log(metrics)\nwandb.log(metrics)\n\n# Finish both\nrn.finish()\nwandb.finish()\n</code></pre>"},{"location":"reference/faq/#can-i-export-to-tensorboard-format","title":"Can I export to TensorBoard format?","text":"<p>The Python SDK includes an exporter:</p> <pre><code>from runicorn import MetricsExporter\n\nexporter = MetricsExporter(run.run_dir)\n\n# Export to TensorBoard-compatible format (planned feature)\n# Currently supported: CSV, Excel, Markdown\nexporter.to_csv(\"metrics.csv\")\n</code></pre>"},{"location":"reference/faq/#advanced","title":"Advanced","text":""},{"location":"reference/faq/#can-i-customize-the-web-ui","title":"Can I customize the web UI?","text":"<p>Yes, through Settings (\u2699\ufe0f icon):</p> <ul> <li>Theme (light/dark/auto)</li> <li>Accent color</li> <li>Background (gradient/image/solid)</li> <li>Chart height and animations</li> <li>And more...</li> </ul> <p>All settings persist in browser localStorage.</p>"},{"location":"reference/faq/#can-i-access-runicorn-from-python-scripts","title":"Can I access Runicorn from Python scripts?","text":"<p>Yes! Use the REST API:</p> <pre><code>import requests\n\n# List experiments\nresponse = requests.get('http://127.0.0.1:23300/api/runs')\nexperiments = response.json()\n\nfor exp in experiments:\n    print(f\"{exp['id']}: {exp['status']}\")\n</code></pre> <p>See the API documentation for details (visit <code>http://127.0.0.1:23300/docs</code> after starting viewer).</p>"},{"location":"reference/faq/#can-i-run-multiple-viewers","title":"Can I run multiple viewers?","text":"<p>Yes, on different ports:</p> <pre><code># Terminal 1\nrunicorn viewer --storage \"E:\\Project1\" --port 23300\n\n# Terminal 2\nrunicorn viewer --storage \"E:\\Project2\" --port 23301\n</code></pre>"},{"location":"reference/faq/#still-have-questions","title":"Still Have Questions?","text":"<ul> <li>\ud83d\udcd6 See Python SDK Overview for programming guide</li> <li>\ud83d\udd27 See CLI Overview for command-line usage</li> <li>\ud83d\udcac Ask on GitHub Discussions</li> <li>\ud83d\udc1b Report bugs</li> </ul> <p>Can't find your answer?</p> <p>Ask the Community \u2192</p>"},{"location":"sdk/overview/","title":"Python SDK Overview","text":"<p>The Runicorn Python SDK provides a simple, intuitive API for tracking ML experiments.</p>"},{"location":"sdk/overview/#core-concepts","title":"Core Concepts","text":""},{"location":"sdk/overview/#experiment-lifecycle","title":"Experiment Lifecycle","text":"<pre><code>graph LR\n    A[rn.init] --&gt; B[rn.log]\n    B --&gt; B\n    B --&gt; C[rn.summary]\n    C --&gt; D[rn.finish]\n\n    style A fill:#52c41a\n    style D fill:#52c41a\n</code></pre> <p>Every experiment follows this lifecycle:</p> <ol> <li>Initialize - Create new experiment</li> <li>Log - Record metrics during training</li> <li>Summary - Save final results</li> <li>Finish - Mark as complete</li> </ol>"},{"location":"sdk/overview/#essential-functions","title":"Essential Functions","text":""},{"location":"sdk/overview/#rninit-initialize-experiment","title":"<code>rn.init()</code> - Initialize Experiment","text":"<p>Create a new experiment run.</p> <p>Signature: <pre><code>def init(\n    project: str = \"default\",\n    name: str = None,\n    storage: str = None,\n    run_id: str = None,\n    capture_env: bool = True\n) -&gt; Run\n</code></pre></p> <p>Parameters:</p> Parameter Type Default Description <code>project</code> str \"default\" Project name (like a folder) <code>name</code> str \"default\" Experiment name (like sub-folder) <code>storage</code> str None Storage root path (overrides config) <code>run_id</code> str None Custom run ID (auto-generated if None) <code>capture_env</code> bool True Capture Git info, dependencies, system info <p>Returns: <code>Run</code> object</p> <p>Example: <pre><code>import runicorn as rn\n\n# Simple\nrun = rn.init(project=\"demo\")\n\n# With name\nrun = rn.init(project=\"image_classification\", name=\"resnet50_v1\")\n\n# With custom storage\nrun = rn.init(project=\"demo\", storage=\"E:\\\\MLData\")\n\n# Without environment capture (faster)\nrun = rn.init(project=\"demo\", capture_env=False)\n</code></pre></p>"},{"location":"sdk/overview/#rnlog-log-metrics","title":"<code>rn.log()</code> - Log Metrics","text":"<p>Record training metrics at each step.</p> <p>Signature: <pre><code>def log(\n    data: dict = None,\n    step: int = None,\n    stage: str = None,\n    **kwargs\n) -&gt; None\n</code></pre></p> <p>Parameters:</p> Parameter Type Description <code>data</code> dict Dictionary of metric names and values <code>step</code> int Training step (auto-increments if not provided) <code>stage</code> str Training stage: \"warmup\", \"train\", \"eval\", etc. <code>**kwargs</code> any Additional metrics as keyword arguments <p>Example: <pre><code>import runicorn as rn\n\nrun = rn.init(project=\"demo\")\n\n# Simple logging\nrn.log({\"loss\": 0.5, \"accuracy\": 0.8}, step=10)\n\n# Auto-incrementing step\nrn.log({\"loss\": 0.4})  # step=1\nrn.log({\"loss\": 0.3})  # step=2\n\n# With stage\nrn.log({\"loss\": 0.2}, stage=\"train\")\nrn.log({\"val_loss\": 0.3}, stage=\"eval\")\n\n# Using kwargs\nrn.log(loss=0.1, accuracy=0.95, lr=0.001, step=100)\n\n# Mixed\nrn.log({\"loss\": 0.1}, accuracy=0.95, step=100)\n\nrn.finish()\n</code></pre></p>"},{"location":"sdk/overview/#rnlog_text-log-text-messages","title":"<code>rn.log_text()</code> - Log Text Messages","text":"<p>Log text messages and progress updates.</p> <p>Signature: <pre><code>def log_text(text: str) -&gt; None\n</code></pre></p> <p>Example: <pre><code>import runicorn as rn\n\nrun = rn.init(project=\"demo\")\n\nrn.log_text(\"Starting training...\")\nrn.log_text(f\"Epoch 1/100, loss=0.5\")\nrn.log_text(\"\u2713 Training completed\")\n\nrn.finish()\n</code></pre></p>"},{"location":"sdk/overview/#rnlog_image-log-images","title":"<code>rn.log_image()</code> - Log Images","text":"<p>Log images for visualization.</p> <p>Signature: <pre><code>def log_image(\n    key: str,\n    image: Any,\n    step: int = None,\n    caption: str = None,\n    format: str = \"png\",\n    quality: int = 90\n) -&gt; str\n</code></pre></p> <p>Parameters:</p> Parameter Type Description <code>key</code> str Image identifier/name <code>image</code> PIL.Image, np.ndarray, bytes, or path Image to log <code>step</code> int Training step <code>caption</code> str Image caption <code>format</code> str Image format: \"png\", \"jpg\" <code>quality</code> int JPEG quality (1-100) <p>Example: <pre><code>import runicorn as rn\nfrom PIL import Image\nimport numpy as np\n\nrun = rn.init(project=\"demo\")\n\n# From PIL Image\nimg = Image.open(\"prediction.png\")\nrn.log_image(\"prediction\", img, step=100, caption=\"Model prediction\")\n\n# From numpy array\narray = np.random.rand(224, 224, 3) * 255\nrn.log_image(\"sample\", array.astype(np.uint8), step=100)\n\n# From file path\nrn.log_image(\"result\", \"output.jpg\", step=100)\n\nrn.finish()\n</code></pre></p>"},{"location":"sdk/overview/#rnset_primary_metric-track-best-value","title":"<code>rn.set_primary_metric()</code> - Track Best Value","text":"<p>Set which metric to track automatically.</p> <p>Signature: <pre><code>def set_primary_metric(\n    metric_name: str,\n    mode: str = \"max\"\n) -&gt; None\n</code></pre></p> <p>Parameters:</p> Parameter Type Description <code>metric_name</code> str Metric to track (e.g., \"accuracy\", \"loss\") <code>mode</code> str \"max\" (higher is better) or \"min\" (lower is better) <p>Example: <pre><code>import runicorn as rn\n\nrun = rn.init(project=\"demo\")\n\n# Track best accuracy\nrn.set_primary_metric(\"accuracy\", mode=\"max\")\n\n# Training loop\nfor step in range(100):\n    acc = train_step()  # Your training code\n    rn.log({\"accuracy\": acc}, step=step)\n\n# Best accuracy is automatically saved to summary\nrn.finish()\n</code></pre></p> <p>Automatic tracking: The best value and its step are automatically saved to <code>summary.json</code>.</p>"},{"location":"sdk/overview/#rnsummary-save-summary","title":"<code>rn.summary()</code> - Save Summary","text":"<p>Record final results and metadata.</p> <p>Signature: <pre><code>def summary(update: dict) -&gt; None\n</code></pre></p> <p>Example: <pre><code>import runicorn as rn\n\nrun = rn.init(project=\"demo\")\n\n# Training...\nfor step in range(100):\n    rn.log({\"loss\": 0.1}, step=step)\n\n# Save final results\nrn.summary({\n    \"final_accuracy\": 0.95,\n    \"final_loss\": 0.05,\n    \"total_epochs\": 100,\n    \"dataset\": \"CIFAR-10\",\n    \"model\": \"ResNet50\",\n    \"notes\": \"Baseline experiment with default hyperparameters\"\n})\n\nrn.finish()\n</code></pre></p>"},{"location":"sdk/overview/#rnfinish-complete-experiment","title":"<code>rn.finish()</code> - Complete Experiment","text":"<p>Mark experiment as finished.</p> <p>Signature: <pre><code>def finish(status: str = \"finished\") -&gt; None\n</code></pre></p> <p>Parameters:</p> Parameter Type Default Description <code>status</code> str \"finished\" Final status: \"finished\", \"failed\", \"interrupted\" <p>Example: <pre><code>import runicorn as rn\n\nrun = rn.init(project=\"demo\")\n\ntry:\n    # Training code\n    for step in range(100):\n        rn.log({\"loss\": 0.1}, step=step)\n\n    # Success\n    rn.finish(status=\"finished\")\n\nexcept KeyboardInterrupt:\n    # User interrupted\n    rn.finish(status=\"interrupted\")\n\nexcept Exception as e:\n    # Training failed\n    rn.log_text(f\"Error: {e}\")\n    rn.finish(status=\"failed\")\n</code></pre></p>"},{"location":"sdk/overview/#complete-example","title":"Complete Example","text":"<p>Here's a complete experiment tracking a real PyTorch model:</p> <pre><code>import runicorn as rn\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import datasets, transforms\n\n# Initialize\nrun = rn.init(\n    project=\"image_classification\",\n    name=\"mnist_cnn\",\n    capture_env=True  # Capture Git, pip packages, system info\n)\n\nrn.log_text(\"Starting MNIST training...\")\nrn.set_primary_metric(\"test_accuracy\", mode=\"max\")\n\n# Define model\nmodel = nn.Sequential(\n    nn.Conv2d(1, 32, 3, 1),\n    nn.ReLU(),\n    nn.MaxPool2d(2),\n    nn.Flatten(),\n    nn.Linear(5408, 10)\n)\n\noptimizer = optim.Adam(model.parameters(), lr=0.001)\ncriterion = nn.CrossEntropyLoss()\n\n# Load data\ntrain_loader = torch.utils.data.DataLoader(\n    datasets.MNIST('./data', train=True, download=True,\n                   transform=transforms.ToTensor()),\n    batch_size=64, shuffle=True\n)\n\n# Training loop\nfor epoch in range(10):\n    model.train()\n    total_loss = 0\n\n    for batch_idx, (data, target) in enumerate(train_loader):\n        optimizer.zero_grad()\n        output = model(data)\n        loss = criterion(output, target)\n        loss.backward()\n        optimizer.step()\n\n        total_loss += loss.item()\n\n        # Log every 100 batches\n        if batch_idx % 100 == 0:\n            rn.log({\n                \"train_loss\": loss.item(),\n                \"learning_rate\": optimizer.param_groups[0]['lr']\n            }, stage=\"train\")\n\n    # Log epoch metrics\n    avg_loss = total_loss / len(train_loader)\n    rn.log({\"epoch_loss\": avg_loss}, step=epoch)\n    rn.log_text(f\"Epoch {epoch+1}/10, loss={avg_loss:.4f}\")\n\n# Save model\ntorch.save(model.state_dict(), \"mnist_model.pth\")\n\n# Save as artifact\nartifact = rn.Artifact(\"mnist-cnn\", type=\"model\")\nartifact.add_file(\"mnist_model.pth\")\nartifact.add_metadata({\n    \"architecture\": \"Simple CNN\",\n    \"epochs\": 10,\n    \"optimizer\": \"Adam\",\n    \"dataset\": \"MNIST\"\n})\n\nversion = run.log_artifact(artifact)\nrn.log_text(f\"Model saved as v{version}\")\n\n# Summary\nrn.summary({\n    \"final_loss\": avg_loss,\n    \"total_epochs\": 10,\n    \"model_path\": \"mnist_model.pth\"\n})\n\nrn.finish()\nprint(f\"\u2713 Experiment completed: {run.id}\")\n</code></pre> <p>Then view in browser: <code>runicorn viewer</code> \u2192 http://127.0.0.1:23300</p>"},{"location":"sdk/overview/#common-patterns","title":"Common Patterns","text":""},{"location":"sdk/overview/#pattern-1-simple-training-loop","title":"Pattern 1: Simple Training Loop","text":"<pre><code>import runicorn as rn\n\nrun = rn.init(project=\"demo\", name=\"simple_training\")\nrn.set_primary_metric(\"accuracy\", mode=\"max\")\n\nfor epoch in range(100):\n    # Your training code\n    loss, acc = train_one_epoch(model)\n\n    # Log metrics\n    rn.log({\"loss\": loss, \"accuracy\": acc}, step=epoch)\n\nrn.finish()\n</code></pre>"},{"location":"sdk/overview/#pattern-2-multi-stage-training","title":"Pattern 2: Multi-Stage Training","text":"<pre><code>import runicorn as rn\n\nrun = rn.init(project=\"demo\")\n\n# Warmup stage\nfor step in range(10):\n    rn.log({\"loss\": 1.0}, step=step, stage=\"warmup\")\n\n# Training stage\nfor step in range(10, 100):\n    rn.log({\"loss\": 0.5}, step=step, stage=\"train\")\n\n# Evaluation stage\nfor step in range(100, 110):\n    rn.log({\"val_loss\": 0.3}, step=step, stage=\"eval\")\n\nrn.finish()\n</code></pre>"},{"location":"sdk/overview/#pattern-3-checkpoint-saving","title":"Pattern 3: Checkpoint Saving","text":"<pre><code>import runicorn as rn\nimport torch\n\nrun = rn.init(project=\"training\")\n\nfor epoch in range(100):\n    train_one_epoch(model)\n\n    # Save checkpoint every 10 epochs\n    if epoch % 10 == 0:\n        # Save model\n        checkpoint_path = f\"checkpoint_epoch{epoch}.pth\"\n        torch.save(model.state_dict(), checkpoint_path)\n\n        # Save as artifact\n        artifact = rn.Artifact(f\"model-checkpoint\", type=\"model\")\n        artifact.add_file(checkpoint_path)\n        artifact.add_metadata({\"epoch\": epoch})\n\n        version = run.log_artifact(artifact)\n        rn.log_text(f\"Checkpoint saved as v{version}\")\n\nrn.finish()\n</code></pre>"},{"location":"sdk/overview/#best-practices","title":"Best Practices","text":"<p>Tip: Organize Your Projects</p> <p>Use a clear project/name hierarchy:</p> <pre><code># Good\nrn.init(project=\"image_classification\", name=\"resnet50_baseline\")\nrn.init(project=\"image_classification\", name=\"resnet50_augmented\")\nrn.init(project=\"nlp\", name=\"bert_finetuning\")\n\n# Avoid\nrn.init(project=\"test\", name=\"exp1\")  # Not descriptive\n</code></pre> <p>Tip: Set Primary Metric</p> <p>Always set a primary metric for easy comparison:</p> <pre><code>rn.set_primary_metric(\"accuracy\", mode=\"max\")\n# Now best accuracy is automatically tracked\n</code></pre> <p>Remember to call finish()</p> <p>Always call <code>rn.finish()</code> at the end to ensure data is saved:</p> <pre><code>run = rn.init(project=\"demo\")\ntry:\n    # Training code\n    rn.log({\"loss\": 0.1})\nfinally:\n    rn.finish()  # Always called, even if error occurs\n</code></pre>"},{"location":"sdk/overview/#next-steps","title":"Next Steps","text":"<ul> <li>More SDK documentation coming soon</li> <li>For complete API reference, see the inline documentation in code</li> <li>For examples, see Image Classification Tutorial</li> </ul>"},{"location":"sdk/overview/#quick-reference","title":"Quick Reference","text":"<pre><code>import runicorn as rn\n\n# Initialize\nrun = rn.init(project=\"demo\", name=\"exp1\")\n\n# Set primary metric\nrn.set_primary_metric(\"accuracy\", mode=\"max\")\n\n# Log metrics\nrn.log({\"loss\": 0.1, \"accuracy\": 0.95}, step=100, stage=\"train\")\n\n# Log text\nrn.log_text(\"Training started\")\n\n# Log image\nrn.log_image(\"prediction\", image_array, step=100)\n\n# Save artifact\nartifact = rn.Artifact(\"my-model\", type=\"model\")\nartifact.add_file(\"model.pth\")\nrun.log_artifact(artifact)\n\n# Summary\nrn.summary({\"final_accuracy\": 0.95})\n\n# Finish\nrn.finish()\n</code></pre> <p>Learn More About Experiment Tracking \u2192</p>"},{"location":"tutorials/image-classification/","title":"Tutorial: Image Classification with PyTorch","text":"<p>Learn how to track a complete image classification experiment using Runicorn with PyTorch and CIFAR-10.</p> <p>What you'll learn:</p> <ul> <li>\u2705 Track training progress</li> <li>\u2705 Log images and visualizations</li> <li>\u2705 Save model checkpoints as artifacts</li> <li>\u2705 Compare multiple runs</li> <li>\u2705 Export results</li> </ul> <p>Time: ~30 minutes</p>"},{"location":"tutorials/image-classification/#prerequisites","title":"Prerequisites","text":"<p>Install required packages:</p> <pre><code>pip install runicorn torch torchvision matplotlib\n</code></pre>"},{"location":"tutorials/image-classification/#step-1-setup-and-initialization","title":"Step 1: Setup and Initialization","text":"<pre><code>import runicorn as rn\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision\nimport torchvision.transforms as transforms\nfrom PIL import Image\nimport numpy as np\n\n# Initialize experiment\nrun = rn.init(\n    project=\"image_classification\",\n    name=\"cifar10_resnet18\",\n    capture_env=True  # Capture Git, packages, system info\n)\n\n# Log configuration\nrn.log_text(\"=\"*50)\nrn.log_text(\"CIFAR-10 Classification with ResNet18\")\nrn.log_text(\"=\"*50)\n\n# Set primary metric\nrn.set_primary_metric(\"test_accuracy\", mode=\"max\")\n\n# Log hyperparameters\nhyperparams = {\n    \"model\": \"ResNet18\",\n    \"dataset\": \"CIFAR-10\",\n    \"batch_size\": 128,\n    \"learning_rate\": 0.001,\n    \"optimizer\": \"Adam\",\n    \"epochs\": 50\n}\n\nrn.summary(hyperparams)\nrn.log_text(f\"Hyperparameters: {hyperparams}\")\n</code></pre>"},{"location":"tutorials/image-classification/#step-2-prepare-data","title":"Step 2: Prepare Data","text":"<pre><code># Data transforms\ntransform_train = transforms.Compose([\n    transforms.RandomCrop(32, padding=4),\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n])\n\ntransform_test = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n])\n\n# Load CIFAR-10\ntrainset = torchvision.datasets.CIFAR10(\n    root='./data', train=True, download=True, transform=transform_train\n)\ntrainloader = torch.utils.data.DataLoader(\n    trainset, batch_size=128, shuffle=True, num_workers=2\n)\n\ntestset = torchvision.datasets.CIFAR10(\n    root='./data', train=False, download=True, transform=transform_test\n)\ntestloader = torch.utils.data.DataLoader(\n    testset, batch_size=128, shuffle=False, num_workers=2\n)\n\nrn.log_text(f\"Training samples: {len(trainset)}\")\nrn.log_text(f\"Test samples: {len(testset)}\")\n</code></pre>"},{"location":"tutorials/image-classification/#step-3-define-model","title":"Step 3: Define Model","text":"<pre><code>from torchvision.models import resnet18\n\n# Create model\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel = resnet18(num_classes=10)\nmodel = model.to(device)\n\n# Log model info\ntotal_params = sum(p.numel() for p in model.parameters())\ntrainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n\nrn.log_text(f\"Model: ResNet18\")\nrn.log_text(f\"Total parameters: {total_params:,}\")\nrn.log_text(f\"Trainable parameters: {trainable_params:,}\")\nrn.log_text(f\"Device: {device}\")\n\n# Criterion and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\nscheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=50)\n</code></pre>"},{"location":"tutorials/image-classification/#step-4-training-loop-with-logging","title":"Step 4: Training Loop with Logging","text":"<pre><code>import time\n\nbest_test_acc = 0.0\n\nfor epoch in range(50):\n    epoch_start = time.time()\n\n    # ===== Training Phase =====\n    model.train()\n    train_loss = 0.0\n    train_correct = 0\n    train_total = 0\n\n    for batch_idx, (inputs, targets) in enumerate(trainloader):\n        inputs, targets = inputs.to(device), targets.to(device)\n\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, targets)\n        loss.backward()\n        optimizer.step()\n\n        train_loss += loss.item()\n        _, predicted = outputs.max(1)\n        train_total += targets.size(0)\n        train_correct += predicted.eq(targets).sum().item()\n\n        # Log every 50 batches\n        if batch_idx % 50 == 0:\n            rn.log({\n                \"batch_loss\": loss.item(),\n                \"batch_acc\": 100.0 * predicted.eq(targets).sum().item() / targets.size(0)\n            }, stage=\"train\")\n\n    train_loss = train_loss / len(trainloader)\n    train_acc = 100.0 * train_correct / train_total\n\n    # ===== Validation Phase =====\n    model.eval()\n    test_loss = 0.0\n    test_correct = 0\n    test_total = 0\n\n    with torch.no_grad():\n        for inputs, targets in testloader:\n            inputs, targets = inputs.to(device), targets.to(device)\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n\n            test_loss += loss.item()\n            _, predicted = outputs.max(1)\n            test_total += targets.size(0)\n            test_correct += predicted.eq(targets).sum().item()\n\n    test_loss = test_loss / len(testloader)\n    test_acc = 100.0 * test_correct / test_total\n\n    # ===== Log Epoch Metrics =====\n    epoch_time = time.time() - epoch_start\n    current_lr = optimizer.param_groups[0]['lr']\n\n    rn.log({\n        \"train_loss\": train_loss,\n        \"train_accuracy\": train_acc,\n        \"test_loss\": test_loss,\n        \"test_accuracy\": test_acc,\n        \"learning_rate\": current_lr,\n        \"epoch_time\": epoch_time\n    }, step=epoch + 1, stage=\"epoch\")\n\n    # Log progress\n    rn.log_text(\n        f\"Epoch {epoch+1}/50: \"\n        f\"train_loss={train_loss:.4f}, train_acc={train_acc:.2f}%, \"\n        f\"test_loss={test_loss:.4f}, test_acc={test_acc:.2f}%, \"\n        f\"lr={current_lr:.6f}, time={epoch_time:.1f}s\"\n    )\n\n    # Save checkpoint if best\n    if test_acc &gt; best_test_acc:\n        best_test_acc = test_acc\n\n        # Save checkpoint\n        checkpoint_path = f\"checkpoint_best.pth\"\n        torch.save({\n            'epoch': epoch,\n            'model_state_dict': model.state_dict(),\n            'optimizer_state_dict': optimizer.state_dict(),\n            'test_accuracy': test_acc,\n        }, checkpoint_path)\n\n        rn.log_text(f\"\u2713 New best accuracy: {test_acc:.2f}%\")\n\n    # Update learning rate\n    scheduler.step()\n\nrn.log_text(\"Training completed!\")\n</code></pre>"},{"location":"tutorials/image-classification/#step-5-save-model-as-artifact","title":"Step 5: Save Model as Artifact","text":"<pre><code># Save final model\nfinal_model_path = \"resnet18_cifar10_final.pth\"\ntorch.save(model.state_dict(), final_model_path)\n\n# Create artifact\nartifact = rn.Artifact(\"cifar10-resnet18\", type=\"model\")\nartifact.add_file(final_model_path)\nartifact.add_metadata({\n    \"architecture\": \"ResNet18\",\n    \"dataset\": \"CIFAR-10\",\n    \"num_classes\": 10,\n    \"input_size\": \"32x32\",\n    \"final_test_accuracy\": test_acc,\n    \"best_test_accuracy\": best_test_acc,\n    \"total_epochs\": 50,\n    \"optimizer\": \"Adam\",\n    \"learning_rate\": 0.001\n})\nartifact.add_tags(\"baseline\", \"resnet18\", \"cifar10\")\n\nversion = run.log_artifact(artifact)\nrn.log_text(f\"\u2713 Model saved as artifact v{version}\")\n\n# Save final summary\nrn.summary({\n    \"final_test_accuracy\": test_acc,\n    \"best_test_accuracy\": best_test_acc,\n    \"total_epochs\": 50,\n    \"total_training_time\": time.time() - epoch_start,\n    \"model_artifact\": f\"cifar10-resnet18:v{version}\"\n})\n\nrn.finish()\nprint(f\"\\n\u2713 Experiment completed: {run.id}\")\nprint(f\"\u2713 View results: http://127.0.0.1:23300/runs/{run.id}\")\n</code></pre>"},{"location":"tutorials/image-classification/#step-6-view-results","title":"Step 6: View Results","text":""},{"location":"tutorials/image-classification/#start-viewer","title":"Start Viewer","text":"<pre><code>runicorn viewer\n</code></pre>"},{"location":"tutorials/image-classification/#explore-your-results","title":"Explore Your Results","text":"<ol> <li>Experiments Page: Find your run \"cifar10_resnet18\"</li> <li>Click to view details:</li> <li>Training/test loss curves</li> <li>Accuracy progression</li> <li>Learning rate schedule</li> <li>Real-time logs</li> <li>Artifacts tab: See your saved model</li> <li>Download model: Click on artifact to download</li> </ol>"},{"location":"tutorials/image-classification/#step-7-use-saved-model","title":"Step 7: Use Saved Model","text":"<p>Create a new script <code>inference.py</code>:</p> <pre><code>import runicorn as rn\nimport torch\nfrom torchvision.models import resnet18\nfrom PIL import Image\nimport torchvision.transforms as transforms\n\n# Initialize inference run\nrun = rn.init(project=\"image_classification\", name=\"inference\")\n\n# Load model artifact\nartifact = run.use_artifact(\"cifar10-resnet18:latest\")\nmodel_dir = artifact.download()\n\n# Load model\nmodel = resnet18(num_classes=10)\nstate_dict = torch.load(model_dir / \"resnet18_cifar10_final.pth\")\nmodel.load_state_dict(state_dict)\nmodel.eval()\n\nprint(f\"\u2713 Loaded model: {artifact.full_name}\")\nprint(f\"  Accuracy: {artifact.get_metadata().metadata['final_test_accuracy']:.2f}%\")\n\n# Run inference\n# ... your inference code ...\n\nrn.finish()\n</code></pre>"},{"location":"tutorials/image-classification/#next-steps","title":"Next Steps","text":""},{"location":"tutorials/image-classification/#compare-experiments","title":"Compare Experiments","text":"<p>Run the same experiment with different hyperparameters:</p> <pre><code># Experiment 1: Baseline\nrun1 = rn.init(project=\"image_classification\", name=\"resnet18_lr0.001\")\n# ... training with lr=0.001 ...\n\n# Experiment 2: Higher learning rate\nrun2 = rn.init(project=\"image_classification\", name=\"resnet18_lr0.01\")\n# ... training with lr=0.01 ...\n</code></pre> <p>Then compare in Web UI: 1. Go to experiment detail page 2. Select multiple runs 3. View overlaid charts</p>"},{"location":"tutorials/image-classification/#try-different-models","title":"Try Different Models","text":"<pre><code># ResNet34\nrun = rn.init(project=\"image_classification\", name=\"cifar10_resnet34\")\nmodel = torchvision.models.resnet34(num_classes=10)\n# ... training ...\n\n# EfficientNet\nrun = rn.init(project=\"image_classification\", name=\"cifar10_efficientnet\")\nmodel = torchvision.models.efficientnet_b0(num_classes=10)\n# ... training ...\n</code></pre>"},{"location":"tutorials/image-classification/#full-code","title":"Full Code","text":"<p>Download complete example:</p> <pre><code># Clone repository\ngit clone https://github.com/yourusername/runicorn.git\n\n# Run example\ncd runicorn/examples\npython image_classification_tutorial.py\n</code></pre> <p>Or view on GitHub: image_classification_tutorial.py</p>"},{"location":"tutorials/image-classification/#related-tutorials","title":"Related Tutorials","text":"<ul> <li>More tutorials coming soon</li> <li>Check back for NLP, multi-GPU, and other advanced tutorials</li> </ul> <p>Ready for more?</p> <p>Check FAQ \u2192</p>"}]}